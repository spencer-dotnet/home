@inject HttpClient _httpClient

<div>
    @if (AppState.Expenses == null || AppState.Expenses.Count == 0)
    {
        <p>Loading...</p>
        <div class="alert-danger">
            @ErrorMessage
        </div>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <td>Date</td>
                    <td>Amount</td>
                    <td>Category</td>
                    <td><!--Blank--></td>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in AppState.Expenses)
                {
                    <tr>
                        <td>@e.Date.ToShortDateString()</td>
                        <td>@e.Amount</td>
                        <td>@e.Category</td>
                        <td><button class="btn btn-danger" @onclick="(ev => DeleteExpense(e.Id))">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    [CascadingParameter] public CascadingAppState AppState { get; set; }

    public string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        if(AppState.Expenses.Count == 0)
        {
            var response = await _httpClient.GetAsync("api/expense");

            if (response.IsSuccessStatusCode)
            {
                AppState.Expenses = await response.Content.ReadFromJsonAsync<List<Expense>>();
            }
            else
            {
                ErrorMessage = $"Failed to Fetch Data {response.StatusCode}";
            }

        }
    }

    private async void DeleteExpense(string id)
    {
        var response = await _httpClient.DeleteAsync($"api/expense/{id}");

        if(response.IsSuccessStatusCode)
        {
            AppState.RemoveExpenseById(id);
        }
    }
}
