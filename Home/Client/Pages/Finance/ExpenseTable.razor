@inject HttpClient _httpClient
@inject ExpenseStateContainer ExpenseState


<div>
    @if (ExpenseState.Expenses == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <td>Date</td>
                    <td>Amount</td>
                    <td>Category</td>
                    <td><!--Blank--></td>
                </tr>
            </thead>
            <tbody>
                @foreach (var e in ExpenseState.Expenses)
                {
                    <tr>
                        <td>@e.Date.ToShortDateString()</td>
                        <td>@e.Amount</td> 
                        <td>@e.Category</td>
                        <td><button class="btn btn-danger" @onclick="(ev => DeleteExpense(e.Id))">Delete</button></td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>


@code {
    protected override async Task OnInitializedAsync()
    {
        ExpenseState.OnChange += StateHasChanged;

        if(ExpenseState.Expenses == null)
        {
            await GetExpenses();
        }
    }

    private async Task<List<Expense>> GetExpenses()
    {
        var response = await _httpClient.GetAsync("api/expense");

        return await response.Content.ReadFromJsonAsync<List<Expense>>();
    }

    private async void DeleteExpense(string id)
    {
        await _httpClient.DeleteAsync($"api/expense/{id}");

        ExpenseState.Expenses.RemoveAll(exp => exp.Id == id);

        StateHasChanged();
    }

    public void Dispose()
    {
        ExpenseState.OnChange -= StateHasChanged;
    }
}
